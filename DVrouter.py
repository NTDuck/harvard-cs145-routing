####################################################
# DVrouter.py
# Name:
# HUID:
#####################################################

import json
import math
from typing import Any, Optional
from packet import Packet
from router import Router


type __Addr = Any
type __Port = Any
type __Cost = int

# Heuristic
__INFINITY = 16


class __ForwardingTableEntry:
    def __init__(self, cost: __Cost, next_hop: Optional[__Addr] = None, port: Optional[__Port] = None):
        self.cost = cost
        self.next_hop = next_hop
        self.port = port

class __NeighborEntry:
    def __init__(self, cost: __Cost, port: __Port):
        self.cost = cost
        self.port = port

class __DistanceVectorEntry:
    def __init__(self, cost: __Cost, next_hop: __Addr):
        self.cost = cost
        self.next_hop = next_hop


# Who even names a class like this?
# Variables should have no underscore prefix
# (assuming this class is not used by any external authorities)
class DVrouter(Router):
    """Distance vector routing protocol implementation.

    Add your own class fields and initialization code (e.g. to create forwarding table
    data structures). See the `Router` base class for docstrings of the methods to
    override.
    """

    def __init__(self, addr, heartbeat_time):
        Router.__init__(self, addr)  # Initialize base class - DO NOT REMOVE
        self.heartbeat_time = heartbeat_time
        self.last_time = 0

        # TODO
        #   add your own class fields and initialization code here
        self.__forwarding_table: dict[__Addr, __ForwardingTableEntry] = {}
        self.__forwarding_table[self.addr] = __ForwardingTableEntry(cost=0, next_hop=self.addr, port=None)

        self.__neighbor_addrs_by_ports: dict[__Port, __Addr] = {}
        self.__neighbors_by_addrs: dict[__Addr, __NeighborEntry] = {}

    def handle_packet(self, neighbor_port: __Port, packet: Packet):
        """Process incoming packet."""
        # TODO
        if packet.is_traceroute:
            # Hint: this is a normal data packet
            # If the forwarding table contains packet.dst_addr
            if packet.dst_addr in self.__forwarding_table:
            #   send packet based on forwarding table, e.g., self.send(port, packet)
                neighbor_port = self.__forwarding_table[packet.dst_addr].port
                self.send(neighbor_port, packet)
        else:
            distance_vector: dict[__Addr, __DistanceVectorEntry] = json.loads(packet.content)
            is_received_distance_vector_different = False

            for addr, entry in distance_vector.items():
                neighbor_addr = packet.src_addr
            # Hint: this is a routing packet generated by your routing protocol           
            # If the received distance vector is different
                if entry.cost == __INFINITY:
                    if addr in self.__forwarding_table and entry.next_hop == neighbor_addr:
            #   update the local copy of the distance vector
            #   update the distance vector of this router
            #   update the forwarding table
                        self.__forwarding_table[addr] = __ForwardingTableEntry(cost=__INFINITY, next_hop=None, port=None)
                        is_received_distance_vector_different = True

                else:
                    neighbor_cost = self.__neighbors_by_addrs[neighbor_addr].cost
                    new_neighbor_cost = min(entry.cost + neighbor_cost, __INFINITY) # Bellman-Ford algorithm

                    if addr not in self.__forwarding_table or new_neighbor_cost < self.__forwarding_table[addr].cost:
                        neighbor_port = self.__neighbors_by_addrs[neighbor_addr].port
                        self.__forwarding_table[addr] = __ForwardingTableEntry(cost=new_neighbor_cost, next_hop=neighbor_addr, port=neighbor_port)
                        is_received_distance_vector_different = True

            #   broadcast the distance vector of this router to neighbors
            if is_received_distance_vector_different:
                self.__broadcast_to_neighbors()

    def handle_new_link(self, port: __Port, endpoint: __Addr, cost: __Cost):
        """Handle new link."""
        self.__neighbor_addrs_by_ports[port] = endpoint
        self.__neighbors_by_addrs[endpoint] = __NeighborEntry(cost=cost, port=port)

        # TODO
        #   update the distance vector of this router
        #   update the forwarding table
        maybe_entry = self.__forwarding_table.get(endpoint)
        if maybe_entry is None or maybe_entry.cost != cost:
            self.__forwarding_table[endpoint] = __ForwardingTableEntry(cost=cost, next_hop=endpoint, port=port)
        #   broadcast the distance vector of this router to neighbors
            self.__broadcast_to_neighbors()

    def handle_remove_link(self, port: __Port):
        """Handle removed link."""
        neighbor_addr = self.__neighbor_addrs_by_ports.pop(port)
        del self.__neighbors_by_addrs[neighbor_addr]
        
        # TODO
        #   update the distance vector of this router
        #   update the forwarding table
        for addr, entry in self.__forwarding_table.items():
            if entry.port == port:
                self.__forwarding_table[addr] = __ForwardingTableEntry(cost=__INFINITY, next_hop=None, port=None)

        #   broadcast the distance vector of this router to neighbors
        self.__broadcast_to_neighbors()

    def handle_time(self, time_ms):
        """Handle current time."""
        if time_ms - self.last_time >= self.heartbeat_time:
            self.last_time = time_ms
            # TODO
            #   broadcast the distance vector of this router to neighbors
            self.__broadcast_to_neighbors()

    def __repr__(self):
        """Representation for debugging in the network visualizer."""
        # TODO
        #   NOTE This method is for your own convenience and will not be graded
        return f"DVrouter(addr={self.addr})"

    def __broadcast_to_neighbors(self):
        for neighbor_addr, entry in self.__neighbors_by_addrs.items():
            distance_vector = {addr: __DistanceVectorEntry(cost=__INFINITY if neighbor_addr != addr and neighbor_addr == entry.next_hop else entry.cost, next_hop=entry.next_hop) for addr, entry in self.__forwarding_table.items()} # Poisoned reverse
            content = json.dumps(distance_vector)

            port = entry.port
            packet = Packet(kind=Packet.ROUTING, src_addr=self.addr, dst_addr=neighbor_addr, content=content)
            self.send(port, packet)
